/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DiseaseAnalysis as PrismaDiseaseAnalysis,
} from "@prisma/client";

export class DiseaseAnalysisServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DiseaseAnalysisCountArgs, "select">
  ): Promise<number> {
    return this.prisma.diseaseAnalysis.count(args);
  }

  async diseaseAnalyses(
    args: Prisma.DiseaseAnalysisFindManyArgs
  ): Promise<PrismaDiseaseAnalysis[]> {
    return this.prisma.diseaseAnalysis.findMany(args);
  }
  async diseaseAnalysis(
    args: Prisma.DiseaseAnalysisFindUniqueArgs
  ): Promise<PrismaDiseaseAnalysis | null> {
    return this.prisma.diseaseAnalysis.findUnique(args);
  }
  async createDiseaseAnalysis(
    args: Prisma.DiseaseAnalysisCreateArgs
  ): Promise<PrismaDiseaseAnalysis> {
    return this.prisma.diseaseAnalysis.create(args);
  }
  async updateDiseaseAnalysis(
    args: Prisma.DiseaseAnalysisUpdateArgs
  ): Promise<PrismaDiseaseAnalysis> {
    return this.prisma.diseaseAnalysis.update(args);
  }
  async deleteDiseaseAnalysis(
    args: Prisma.DiseaseAnalysisDeleteArgs
  ): Promise<PrismaDiseaseAnalysis> {
    return this.prisma.diseaseAnalysis.delete(args);
  }
}
