/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MedicalRecord as PrismaMedicalRecord } from "@prisma/client";

export class MedicalRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MedicalRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.medicalRecord.count(args);
  }

  async medicalRecords(
    args: Prisma.MedicalRecordFindManyArgs
  ): Promise<PrismaMedicalRecord[]> {
    return this.prisma.medicalRecord.findMany(args);
  }
  async medicalRecord(
    args: Prisma.MedicalRecordFindUniqueArgs
  ): Promise<PrismaMedicalRecord | null> {
    return this.prisma.medicalRecord.findUnique(args);
  }
  async createMedicalRecord(
    args: Prisma.MedicalRecordCreateArgs
  ): Promise<PrismaMedicalRecord> {
    return this.prisma.medicalRecord.create(args);
  }
  async updateMedicalRecord(
    args: Prisma.MedicalRecordUpdateArgs
  ): Promise<PrismaMedicalRecord> {
    return this.prisma.medicalRecord.update(args);
  }
  async deleteMedicalRecord(
    args: Prisma.MedicalRecordDeleteArgs
  ): Promise<PrismaMedicalRecord> {
    return this.prisma.medicalRecord.delete(args);
  }
}
