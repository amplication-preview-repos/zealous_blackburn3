/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MedicalRecordService } from "../medicalRecord.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MedicalRecordCreateInput } from "./MedicalRecordCreateInput";
import { MedicalRecord } from "./MedicalRecord";
import { MedicalRecordFindManyArgs } from "./MedicalRecordFindManyArgs";
import { MedicalRecordWhereUniqueInput } from "./MedicalRecordWhereUniqueInput";
import { MedicalRecordUpdateInput } from "./MedicalRecordUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MedicalRecordControllerBase {
  constructor(
    protected readonly service: MedicalRecordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MedicalRecord })
  @nestAccessControl.UseRoles({
    resource: "MedicalRecord",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMedicalRecord(
    @common.Body() data: MedicalRecordCreateInput
  ): Promise<MedicalRecord> {
    return await this.service.createMedicalRecord({
      data: data,
      select: {
        cost: true,
        cover: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MedicalRecord] })
  @ApiNestedQuery(MedicalRecordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MedicalRecord",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async medicalRecords(
    @common.Req() request: Request
  ): Promise<MedicalRecord[]> {
    const args = plainToClass(MedicalRecordFindManyArgs, request.query);
    return this.service.medicalRecords({
      ...args,
      select: {
        cost: true,
        cover: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MedicalRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MedicalRecord",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async medicalRecord(
    @common.Param() params: MedicalRecordWhereUniqueInput
  ): Promise<MedicalRecord | null> {
    const result = await this.service.medicalRecord({
      where: params,
      select: {
        cost: true,
        cover: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MedicalRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MedicalRecord",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMedicalRecord(
    @common.Param() params: MedicalRecordWhereUniqueInput,
    @common.Body() data: MedicalRecordUpdateInput
  ): Promise<MedicalRecord | null> {
    try {
      return await this.service.updateMedicalRecord({
        where: params,
        data: data,
        select: {
          cost: true,
          cover: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MedicalRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MedicalRecord",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMedicalRecord(
    @common.Param() params: MedicalRecordWhereUniqueInput
  ): Promise<MedicalRecord | null> {
    try {
      return await this.service.deleteMedicalRecord({
        where: params,
        select: {
          cost: true,
          cover: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
