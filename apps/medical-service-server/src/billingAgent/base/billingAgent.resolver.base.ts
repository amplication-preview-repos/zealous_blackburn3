/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BillingAgent } from "./BillingAgent";
import { BillingAgentCountArgs } from "./BillingAgentCountArgs";
import { BillingAgentFindManyArgs } from "./BillingAgentFindManyArgs";
import { BillingAgentFindUniqueArgs } from "./BillingAgentFindUniqueArgs";
import { DeleteBillingAgentArgs } from "./DeleteBillingAgentArgs";
import { BillingAgentService } from "../billingAgent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BillingAgent)
export class BillingAgentResolverBase {
  constructor(
    protected readonly service: BillingAgentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BillingAgent",
    action: "read",
    possession: "any",
  })
  async _billingAgentsMeta(
    @graphql.Args() args: BillingAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BillingAgent])
  @nestAccessControl.UseRoles({
    resource: "BillingAgent",
    action: "read",
    possession: "any",
  })
  async billingAgents(
    @graphql.Args() args: BillingAgentFindManyArgs
  ): Promise<BillingAgent[]> {
    return this.service.billingAgents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BillingAgent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BillingAgent",
    action: "read",
    possession: "own",
  })
  async billingAgent(
    @graphql.Args() args: BillingAgentFindUniqueArgs
  ): Promise<BillingAgent | null> {
    const result = await this.service.billingAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BillingAgent)
  @nestAccessControl.UseRoles({
    resource: "BillingAgent",
    action: "delete",
    possession: "any",
  })
  async deleteBillingAgent(
    @graphql.Args() args: DeleteBillingAgentArgs
  ): Promise<BillingAgent | null> {
    try {
      return await this.service.deleteBillingAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
