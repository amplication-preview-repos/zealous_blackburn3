/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ClaimPrediction as PrismaClaimPrediction,
} from "@prisma/client";

export class ClaimPredictionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClaimPredictionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.claimPrediction.count(args);
  }

  async claimPredictions(
    args: Prisma.ClaimPredictionFindManyArgs
  ): Promise<PrismaClaimPrediction[]> {
    return this.prisma.claimPrediction.findMany(args);
  }
  async claimPrediction(
    args: Prisma.ClaimPredictionFindUniqueArgs
  ): Promise<PrismaClaimPrediction | null> {
    return this.prisma.claimPrediction.findUnique(args);
  }
  async createClaimPrediction(
    args: Prisma.ClaimPredictionCreateArgs
  ): Promise<PrismaClaimPrediction> {
    return this.prisma.claimPrediction.create(args);
  }
  async updateClaimPrediction(
    args: Prisma.ClaimPredictionUpdateArgs
  ): Promise<PrismaClaimPrediction> {
    return this.prisma.claimPrediction.update(args);
  }
  async deleteClaimPrediction(
    args: Prisma.ClaimPredictionDeleteArgs
  ): Promise<PrismaClaimPrediction> {
    return this.prisma.claimPrediction.delete(args);
  }
}
