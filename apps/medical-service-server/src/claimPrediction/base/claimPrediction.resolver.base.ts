/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ClaimPrediction } from "./ClaimPrediction";
import { ClaimPredictionCountArgs } from "./ClaimPredictionCountArgs";
import { ClaimPredictionFindManyArgs } from "./ClaimPredictionFindManyArgs";
import { ClaimPredictionFindUniqueArgs } from "./ClaimPredictionFindUniqueArgs";
import { CreateClaimPredictionArgs } from "./CreateClaimPredictionArgs";
import { UpdateClaimPredictionArgs } from "./UpdateClaimPredictionArgs";
import { DeleteClaimPredictionArgs } from "./DeleteClaimPredictionArgs";
import { ClaimPredictionService } from "../claimPrediction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ClaimPrediction)
export class ClaimPredictionResolverBase {
  constructor(
    protected readonly service: ClaimPredictionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ClaimPrediction",
    action: "read",
    possession: "any",
  })
  async _claimPredictionsMeta(
    @graphql.Args() args: ClaimPredictionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ClaimPrediction])
  @nestAccessControl.UseRoles({
    resource: "ClaimPrediction",
    action: "read",
    possession: "any",
  })
  async claimPredictions(
    @graphql.Args() args: ClaimPredictionFindManyArgs
  ): Promise<ClaimPrediction[]> {
    return this.service.claimPredictions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ClaimPrediction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ClaimPrediction",
    action: "read",
    possession: "own",
  })
  async claimPrediction(
    @graphql.Args() args: ClaimPredictionFindUniqueArgs
  ): Promise<ClaimPrediction | null> {
    const result = await this.service.claimPrediction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClaimPrediction)
  @nestAccessControl.UseRoles({
    resource: "ClaimPrediction",
    action: "create",
    possession: "any",
  })
  async createClaimPrediction(
    @graphql.Args() args: CreateClaimPredictionArgs
  ): Promise<ClaimPrediction> {
    return await this.service.createClaimPrediction({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClaimPrediction)
  @nestAccessControl.UseRoles({
    resource: "ClaimPrediction",
    action: "update",
    possession: "any",
  })
  async updateClaimPrediction(
    @graphql.Args() args: UpdateClaimPredictionArgs
  ): Promise<ClaimPrediction | null> {
    try {
      return await this.service.updateClaimPrediction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClaimPrediction)
  @nestAccessControl.UseRoles({
    resource: "ClaimPrediction",
    action: "delete",
    possession: "any",
  })
  async deleteClaimPrediction(
    @graphql.Args() args: DeleteClaimPredictionArgs
  ): Promise<ClaimPrediction | null> {
    try {
      return await this.service.deleteClaimPrediction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
